1. 枚举
    也称作穷举，从问题的所有可能解的集合里一一枚举各元素，用给定的条件判断哪些是有用的元素，这些元素即为解。

    a) 给出解空间 —— 要枚举哪些元素
    b) 减少枚举空间
    c) 选择合适的枚举顺序

2.递归
    递推的思维是正常人的思维，总是看着眼前的问题思考对策，解决问题是将来时；递归的思维，逼迫我们倒着思考，看到问题的尽头，把解决问题的过程看做过去时。

    递归指：某个函数直接或间接地调用自身。这样一来，原问题就被转换为许多性质相同但规模更小的子问题。

    关注点:
        需要关注：如何把原问题划分成符合条件的子问题
        不需要关注：这个子问题是如何被解决的
        技巧：明白一个函数的作用并相信它能完成这个任务，但千万不要试图跳进细节

    特征
    结束条件
    自我调用

    def func(传入数值):
        if (终止条件)
            return 最小子问题解// 调用自己去解决规模更小的子问题，直到到达结束条件
        return func(缩小规模)

    练习
    经典问题：归并排序

3.分治
    分治算法的三个步骤：分解 -> 解决 -> 合并。

    a) 分解原问题为结构相同的子问题
    b) 分解到某个容易求解的边界之后，进行递归求解
    c) 将子问题的解合并成原问题的解

    归并排序 是典型的分治算法。

    def merge_sort(一个数组):
      if (可以很容易处理)
        return
      merge_sort(左半个数组)
      merge_sort(右半个数组)
      merge(左半个数组, 右半个数组)


4.贪心
    1.模拟「贪心」的人做出的决策
    2.每次都按照某种指标选取最优的操作
    3.只关注眼前，不考虑以后可能造成的影响

    常见做法有:
        离线：按某顺序排序，并按某顺序处理（例如从大到小）
        在线：每次取范围内最大/最小的东西，并更新范围数据

5.二分查找
    用来在一个有序数组中查找某一元素
    对于一个长度为 n 的数组，至多会进行 O(log_n)次查找
    注：这里的有序是广义的有序，如果一个数组中的左侧或者右侧都满足某一种条件，而另一侧都不满足这种条件，也可以看作是一种有序。
