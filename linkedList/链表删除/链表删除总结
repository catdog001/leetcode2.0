链表删除的总结
1.方法总结：
    1.1 next跳跃法
        从head开始跳跃，探测head.next及以后是否为删除值,若是删除值则跳过它们
        -> 删除Nth点(要求值)(19) / 删除重复点，不保留本值(82) / 删除重复的，保留本值(83) / 删除等于某值的点(203)

    1.2 list/dic保存法
        a) 用list保存node值，再处理，后建新链表
            -> 删除Nth点(要求值)(19) / 删除重复的，保留本值(83)(list已有则判断不再append)
            /删除等于某值的点(203)(判断等于某值则不append)
        b) 用dic保存node值及出现次数，再处理，后建新链表 ->  删除重复点，不保留本值(82)

    1.3 one-pass(two pointer)法
        构建一个距离窗口，窗口长度为倒数N个节点到末尾的距离，然后移动窗口，直到窗口前值到达链表末尾，此时窗口后值为倒数第N个值
        -> 链表只迭代一次，就能够删除倒数第N个节点 -> 删除Nth点(要求值)(19)

    1.4 复制跳跃next法
        删除head所在的节点 -> 复制head.next节点到head, 后跳过head.next 即可 -> 删除头节点，无返回(237)
